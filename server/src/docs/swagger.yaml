basePath: null
definitions:
    ProductI:
        description: ""
        properties:
            id:
                type: integer
                format: int32
                description: ""
            name:
                type: string
                description: ""
            description:
                type: string
                description: ""
            price:
                type: number
                format: double
                description: ""
            discountPercentage:
                type: number
                format: double
                description: ""
            currentStock:
                type: integer
                format: int32
                description: ""
            reorderPoint:
                type: integer
                format: int32
                description: ""
            minimum:
                type: integer
                format: int32
                description: ""
            storeId:
                type: integer
                format: int32
                description: ""
            categories:
                type: array
                items:
                    type: string
                description: ""
            sizes:
                type: array
                items:
                    type: string
                description: ""
            brand:
                type: string
                description: ""
            url_img:
                type: string
                description: ""
            status:
                type: integer
                format: int32
                description: ""
        type: object
        required:
            - name
            - description
            - price
            - discountPercentage
            - currentStock
            - reorderPoint
            - minimum
            - storeId
            - categories
            - sizes
            - brand
            - url_img
    Names:
        description: ""
        properties:
            id:
                type: integer
                format: int32
                description: ""
            name:
                type: string
                description: ""
        type: object
        required:
            - id
            - name
    StoreI:
        description: ""
        properties:
            id:
                type: integer
                format: int32
                description: ""
            name:
                type: string
                description: ""
            managerId:
                type: integer
                format: int32
                description: ""
            apiUrl:
                type: string
                description: ""
            status:
                type: number
                format: double
                description: ""
            colors:
                type: object
                properties:
                    primary:
                        type: object
                        properties:
                            hue:
                                type: integer
                                format: int32
                                description: ""
                            sat:
                                type: integer
                                format: int32
                                description: ""
                            light:
                                type: integer
                                format: int32
                                description: ""
                        description: ""
                    secondary:
                        type: object
                        properties:
                            hue:
                                type: integer
                                format: int32
                                description: ""
                            sat:
                                type: integer
                                format: int32
                                description: ""
                            light:
                                type: integer
                                format: int32
                                description: ""
                        description: ""
                description: ""
            products:
                type: array
                items:
                    type: object
                    properties:
                        id:
                            type: integer
                            format: int32
                            description: ""
                        name:
                            type: string
                            description: ""
                        description:
                            type: string
                            description: ""
                        price:
                            type: number
                            format: double
                            description: ""
                        discountPercentage:
                            type: number
                            format: double
                            description: ""
                        currentStock:
                            type: integer
                            format: int32
                            description: ""
                        reorderPoint:
                            type: integer
                            format: int32
                            description: ""
                        minimum:
                            type: integer
                            format: int32
                            description: ""
                        storeId:
                            type: integer
                            format: int32
                            description: ""
                        categories:
                            type: array
                            items:
                                type: string
                            description: ""
                        sizes:
                            type: array
                            items:
                                type: string
                            description: ""
                        brand:
                            type: string
                            description: ""
                        url_img:
                            type: string
                            description: ""
                        status:
                            type: integer
                            format: int32
                            description: ""
                description: ""
        type: object
        required:
            - name
            - managerId
            - apiUrl
    UserI:
        description: ""
        properties:
            id:
                type: integer
                format: int32
                description: ""
            name:
                type: string
                description: ""
            lastName:
                type: string
                description: ""
            email:
                type: string
                description: ""
            password:
                type: string
                description: ""
            idDocumentType:
                type: string
                description: ""
            idDocumentNumber:
                type: integer
                format: int32
                description: ""
            rol:
                type: string
                description: ""
            status:
                type: integer
                format: int32
                description: ""
        type: object
        required:
            - name
            - lastName
            - email
            - idDocumentType
            - idDocumentNumber
            - rol
            - status
info:
    description: 'Shoppy API.'
    license:
        name: ISC
    title: shoppy-api
    version: 1.0.0
paths:
    '/api/shop/{storeId}/product/{productId}':
        get:
            operationId: ProductGetById
            produces:
                - application/json
                - text/html
            responses:
                '201':
                    description: 'Retrieve a Product.'
                    schema:
                        $ref: '#/definitions/ProductI'
                '204':
                    description: 'No content'
                '404':
                    description: 'Product not found.'
            description: 'GET a specific product from it''s id'
            tags:
                - Products
            parameters:
                -
                    description: ""
                    in: path
                    name: productId
                    required: true
                    type: number
                    format: double
    '/api/shop/{storeId}/product/':
        get:
            operationId: ProductGetAll
            produces:
                - application/json
                - text/html
            responses:
                '201':
                    description: 'Retrieve a list of Products.'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/ProductI'
                '204':
                    description: 'No content'
                '404':
                    description: 'Products not found.'
            description: 'GET all products from a store id'
            tags:
                - Products
            parameters: []
        post:
            operationId: ProductPost
            produces:
                - application/json
                - text/html
            responses:
                '201':
                    description: 'Insert a Product on the Database.'
                    schema:
                        $ref: '#/definitions/ProductI'
                '204':
                    description: 'No content'
                '500':
                    description: 'Product insert failed.'
            description: 'CREATE a product on the database'
            tags:
                - Products
            consumes:
                - application/json
            parameters:
                -
                    description: ""
                    in: body
                    name: product
                    required: true
                    schema:
                        $ref: '#/definitions/ProductI'
        put:
            operationId: ProductUpdate
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: 'Update a Product on the Database. Except Categories and Sizes'
                    schema:
                        $ref: '#/definitions/ProductI'
                '204':
                    description: 'No content'
                '404':
                    description: 'Product not found.'
            description: 'UPDATE a product'
            tags:
                - Products
            consumes:
                - application/json
            parameters:
                -
                    description: ""
                    in: body
                    name: product
                    required: true
                    schema:
                        $ref: '#/definitions/ProductI'
    '/api/shop/{storeId}/product/{id}':
        delete:
            operationId: ProductDelete
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: 'Delete a Product on the Database.'
                    schema:
                        $ref: '#/definitions/ProductI'
                '204':
                    description: 'No content'
                '404':
                    description: 'Product not found.'
            description: ""
            tags:
                - Products
            parameters:
                -
                    description: ""
                    in: path
                    name: id
                    required: true
                    type: number
                    format: double
    /api/shop/names:
        get:
            operationId: StoreGetAll
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: 'Return an array of each store id and name'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Names'
                    examples:
                        application/json:
                            -
                                id: 1
                                name: Tienda
                '204':
                    description: 'No content'
                '500':
                    description: 'Stores not found'
            description: 'Return an array of each store id and name'
            tags:
                - Stores
            parameters: []
    '/api/shop/{storeId}':
        get:
            operationId: StoreGetById
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: 'Return a store data'
                    schema:
                        $ref: '#/definitions/StoreI'
                '204':
                    description: 'No content'
                '500':
                    description: 'Store not found'
            description: 'Return a store data with a give id'
            tags:
                - Stores
            parameters:
                -
                    description: ""
                    in: path
                    name: storeId
                    required: true
                    type: number
                    format: double
        delete:
            operationId: StoreDisableStore
            produces:
                - text/html
            responses:
                '204':
                    description: 'No content'
            description: ""
            tags:
                - Stores
            parameters:
                -
                    description: ""
                    in: path
                    name: storeId
                    required: true
                    type: number
                    format: double
    /api/users/q:
        get:
            operationId: UserGetByEmail
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: 'Retrieve an User.'
                    schema:
                        $ref: '#/definitions/UserI'
                '204':
                    description: 'No content'
                '404':
                    description: 'User not found.'
            description: 'Produce an user with a given email'
            tags:
                - Users
            parameters:
                -
                    description: ""
                    in: query
                    name: email
                    required: true
                    type: string
    /api/users/:
        put:
            operationId: UserUpdate
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: 'Updates an User.'
                    schema:
                        $ref: '#/definitions/UserI'
                '204':
                    description: 'No content'
                '404':
                    description: 'User not found.'
            description: 'UPDATES an user'
            tags:
                - Users
            consumes:
                - application/json
            parameters:
                -
                    description: ""
                    in: body
                    name: user
                    required: true
                    schema:
                        $ref: '#/definitions/UserI'
        post:
            operationId: UserPost
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: 'Creates an User.'
                    schema:
                        $ref: '#/definitions/UserI'
                '204':
                    description: 'No content'
                '500':
                    description: 'Server Error.'
            description: 'CREATES an user'
            tags:
                - Users
            consumes:
                - application/json
            parameters:
                -
                    description: ""
                    in: body
                    name: user
                    required: true
                    schema:
                        $ref: '#/definitions/UserI'
        get:
            operationId: UserGetAll
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: 'Retrieve a list of all Users.'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/UserI'
                '204':
                    description: 'No content'
                '404':
                    description: 'Users not found.'
            description: 'Produce a list of all users'
            tags:
                - Users
            parameters: []
    /api/users/login:
        post:
            operationId: UserLogin
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: 'Logins an user.'
                    schema:
                        $ref: '#/definitions/UserI'
                '204':
                    description: 'No content'
                '401':
                    description: 'User not found.'
            description: 'Logins an user with a given email and password'
            tags:
                - Users
            consumes:
                - application/json
            parameters:
                -
                    description: '- {email: string, password: string}'
                    in: body
                    name: user
                    required: true
                    schema:
                        $ref: '#/definitions/UserI'
    '/api/users/{id}':
        delete:
            operationId: UserDelete
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: 'User deleted.'
                    schema:
                        $ref: '#/definitions/UserI'
                '204':
                    description: 'No content'
                '404':
                    description: 'User not found.'
            description: 'DELETE an user'
            tags:
                - Users
            parameters:
                -
                    description: ""
                    in: path
                    name: id
                    required: true
                    type: number
                    format: double
        get:
            operationId: UserGetById
            produces:
                - application/json
                - text/html
            responses:
                '200':
                    description: 'Retrieve an User.'
                    schema:
                        $ref: '#/definitions/UserI'
                '204':
                    description: 'No content'
                '404':
                    description: 'User not found.'
            description: 'GET an user with a given id'
            tags:
                - Users
            parameters:
                -
                    description: ""
                    in: path
                    name: id
                    required: true
                    type: number
                    format: double
swagger: '2.0'
securityDefinitions:
    'client secret':
        type: apiKey
        name: x-auth
        in: header
